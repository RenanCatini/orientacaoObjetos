Resumo do Curso de Programação Orientada a Objetos e Linguagem de Programação Java

Episódio 0 - Parte 1
    - Introdução à Tecnologia Java

Episódio 0 - Parte 2
    - Configuramos o ambiente de Desenvolvimento no Windows

Episódio 1
    * Abstração - Ocultar os detalhes desnecessários para o software.

    * Classes - Um modelo (template) que incorpora características (representadas por atributos/campos/
        variáveis de instância) e funcionalidades (representadas por métodos [funções]). Esse modelo
        é usado como base para N objetos.
        Classe é constituida de membros (campos, construtores e métodos)

    * Objetos - São entidades criadas a partir de classes (processo de instanciação). A classe determina
        a estutura que os objetos em nível de execução vão compartilhar. Dados específicos estão presentes
        em cada objeto.

    * Por exemplo:
        Classe Aluno com atributos nome, curso.

        - Objeto 1 :
            nome = "Patricia"
            curso = "Odontologia"

        - Objeto 2 :
            nome = "Adriano"
            curso = "Educação Física"

            Aluno objeto1 = new Aluno();
            Aluno objeto2 = new Aluno();

    * Pacotes - São estruturas da Linguagem Java que permitem organizar as classes de nossas apliações e fornecem
        um mecanismo simples para o reuso de classes. O reuso é conseguido a partir do comando import, por
        exemplo:
            import java.util.*;  //Mostro para o compilador todas as classes do pacote java.util
            import java.util.Date; //Exibo a localização de apenas uma classe

        - A classe System pertence ao pacote java.lang que é importado por defaul.

        - Recomenda-se sempre criar pacotes para organizar nossas classes e tornar o reuso de objetos sempre possivel.

        - Pacotes são estruturas hierarquicas, escritos em letras minúsculas separadas por pontos, por
            exemplo: br.com.renan.projetox.visao.relarorios

        - Existem 3 cenários básicos para reuso de classes
            1) Reuso de classes dentro do mesmo projeto
            2) Reuso de classes da API do Java SE (classes fornecidas pelo JRE)
            3) Reuso de classes de terceiros (normalmente incorporadas ao seu projeto por arquivos .jar)

        - Podemos compilar e redirecionar a saida de classes presentes em pacotes, via linha de comando
            javac -d <diretorioDestino> arquivos.java
            java pacote.arquivo
            // Dica: estar sempre na raiz para compilar e executar

    * Modificadores de acesso
        - Existem 4 modificadores de acesso na Linguagem Java que controlam a acessibilidade de classes e
            e seus membros perante outros objetos de sua aplicação.
            São eles: private, public, protected e packed-friendly (que é o default e não precisa der declarado)

            - Private: Atributos e métodos definidos com esse modificador de acesso só são acessiveis a partir da
                própria classe que os definiu.

            - Public: Atributos e métodos que são com rotulados com esse modificador possuem acesso universal a
                partir de qualquer classe dentro do projeto.

            - Package-Friendly: Este modificador faz com que os membros declarados com visibilidade de pacote só
                possam ser acessados por metodos e construtores presentes na mesma classe onde os membros com
                visibilidade foram definidos e por outros objetos pertencentes ao mesmo pacote. Não conseguimos
                acessar membros de classes com visibilidade de pacote a partir de outro pacote.
                Uma classe com visibilidade de pacote so pode ser acessada a partir do mesmo pacote.

            - Protected: Discutir mais a diante pois depende de conceito de herança.




